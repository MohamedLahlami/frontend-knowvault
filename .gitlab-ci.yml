# GitLab CI/CD Pipeline for KnowVault Frontend
# Simple pipeline for school project - lints, builds and deploys Docker image

stages:
  - lint
  - build
  - deploy

variables:
  # Docker image configuration
  DOCKER_IMAGE_NAME: "knowvault-frontend"
  DOCKER_TAG: "${CI_COMMIT_SHORT_SHA}"
  DOCKER_LATEST_TAG: "latest"

  # Docker in Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Lint stage - Check code quality (non-blocking)
lint:
  stage: lint
  image: node:18-alpine
  before_script:
    # Install dependencies
    - npm ci --legacy-peer-deps
  script:
    # Run ESLint with relaxed settings (allows up to 50 warnings)
    - echo "üîç Running ESLint..."
    - npm run lint || echo "‚ö†Ô∏è ESLint completed with warnings (non-blocking)"

    # Check TypeScript compilation
    - echo "üîç Running TypeScript type check..."
    - npm run type-check || echo "‚ö†Ô∏è TypeScript type check completed with warnings (non-blocking)"

    # Show success message
    - echo "‚úÖ Code quality check completed!"
  rules:
    # Run on all branches and merge requests
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true # Don't fail the pipeline if linting fails
  artifacts:
    reports:
      # Store lint results for review (optional)
      dotenv: lint.env
    expire_in: 1 week
    when: always

# Build stage - Creates Docker image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    # Login to GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Build the production Docker image
    - docker build --target production -t $CI_REGISTRY_IMAGE:$DOCKER_TAG -t $CI_REGISTRY_IMAGE:$DOCKER_LATEST_TAG .
    # Push both tags to registry
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_TAG
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_LATEST_TAG
  rules:
    # Run on main branch and merge requests
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  artifacts:
    reports:
      # Store build information
      dotenv: build.env
    expire_in: 1 week

# Deploy stage - Simple deployment (can be customized based on your infrastructure)
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    # Install curl for health checks
    - apk add --no-cache curl
  script:
    # Example deployment commands (customize based on your setup)
    - echo "Deploying KnowVault Frontend..."
    - echo "Docker image built and pushed successfully!"
    - echo "Image tag: $DOCKER_TAG"
    - echo "Registry: $CI_REGISTRY_IMAGE"

    # If you have a deployment server, you could add commands like:
    # - ssh user@server "docker pull $CI_REGISTRY_IMAGE:$DOCKER_TAG"
    # - ssh user@server "docker stop knowvault-frontend || true"
    # - ssh user@server "docker run -d -p 80:80 --name knowvault-frontend $CI_REGISTRY_IMAGE:$DOCKER_TAG"

    # For now, just show successful completion
    - echo "‚úÖ Deployment completed successfully!"
  rules:
    # Only deploy from main branch
    - if: $CI_COMMIT_BRANCH == "main"
  environment:
    name: production
    url: http://your-domain.com # Replace with your actual domain
  when: manual # Require manual trigger for deployment

# Optional: Cleanup old images (runs weekly)
cleanup:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Cleaning up old Docker images..."
    - echo "This would remove images older than 30 days"
    # Add cleanup commands here if needed
  rules:
    # Run on schedule only
    - if: $CI_PIPELINE_SOURCE == "schedule"
  when: manual
# ===================================
# Alternative simplified pipeline
# Uncomment the section below if you prefer a single-stage pipeline
# ===================================

# Simple Build & Deploy (All-in-one):
# deploy_simple:
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   before_script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#   script:
#     # Build and push in one step
#     - docker build --target production -t $CI_REGISTRY_IMAGE:latest .
#     - docker push $CI_REGISTRY_IMAGE:latest
#     - echo "‚úÖ KnowVault Frontend deployed successfully!"
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
